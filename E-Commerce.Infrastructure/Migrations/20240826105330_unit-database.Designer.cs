// <auto-generated />
using System;
using System.Collections.Generic;
using E_Commerce.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Commerce.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240826105330_unit-database")]
    partial class unitdatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.Domain.Model.AdministrationAggre.Administration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_websiteColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("_description", "E_Commerce.Domain.Model.AdministrationAggre.Administration._description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Desc_Arb")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Desc_Eng")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title_Arb")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title_Eng")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_heroImage", "E_Commerce.Domain.Model.AdministrationAggre.Administration._heroImage#HeroImage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Path")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Hero_Path");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("_welcomeMessage", "E_Commerce.Domain.Model.AdministrationAggre.Administration._welcomeMessage#WelcomeMessage", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Desc_Arb")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Desc_Eng")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title_Arb")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Title_Eng")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("administrations");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.AdministrationAggre.SpecialProducts", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SpecialProducts");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.CategoryAggre.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuperCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("_parentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("_visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SuperCategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.CustomerAggre.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.OrderAggre.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("_customerId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "E_Commerce.Domain.Model.OrderAggre.Order.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("city")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("state")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address_State");

                            b1.Property<string>("street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Address_Street");
                        });

                    b.HasKey("Id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.ProductAggre.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMaster")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.ProductAggre.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("_CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 8, 26, 13, 53, 30, 54, DateTimeKind.Local).AddTicks(9004));

                    b.Property<DateTime?>("_UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("_stockQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("categoryId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("_price", "E_Commerce.Domain.Model.ProductAggre.Product._price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int?>("_discount")
                                .HasColumnType("int")
                                .HasColumnName("Price_discount");

                            b1.Property<bool?>("_hasPercentage")
                                .HasColumnType("bit")
                                .HasColumnName("Price_hasPercentage");

                            b1.Property<decimal>("_price")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price_price");

                            b1.Property<decimal>("_total")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price_total");
                        });

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.ProductOptionAggre.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_optionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_productId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("productsOption");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.ReviewAggre.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("_customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.SpecificationAggre.Options", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("specificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("specificationId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.SpecificationAggre.Specification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("specifications");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.SuperCategoryAggre.SuperCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("superCategories");
                });

            modelBuilder.Entity("E_Commerce.Identity.Domain.Model.UserAggre.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("_firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Identity.Domain.Model.UserRoleAggre.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.CategoryAggre.Category", b =>
                {
                    b.HasOne("E_Commerce.Domain.Model.CategoryAggre.Category", null)
                        .WithMany("ChildCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("E_Commerce.Domain.Model.SuperCategoryAggre.SuperCategory", null)
                        .WithMany("categories")
                        .HasForeignKey("SuperCategoryId");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.OrderAggre.Order", b =>
                {
                    b.OwnsMany("E_Commerce.Domain.Model.OrderAggre.OrderItem", "_orderItems", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("_orderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("_productId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("_quantity")
                                .HasColumnType("int");

                            b1.Property<decimal>("_total")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("Id");

                            b1.HasIndex("_orderId");

                            b1.ToTable("OrderItem");

                            b1.WithOwner("_order")
                                .HasForeignKey("_orderId");

                            b1.Navigation("_order");
                        });

                    b.Navigation("_orderItems");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.ProductAggre.Image", b =>
                {
                    b.HasOne("E_Commerce.Domain.Model.ProductAggre.Product", "Product")
                        .WithMany("images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.ReviewAggre.Review", b =>
                {
                    b.OwnsOne("E_Commerce.Domain.Model.ReviewAggre.Rating", "rating", b1 =>
                        {
                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<double>("Value")
                                .HasColumnType("float");

                            b1.HasKey("ReviewId");

                            b1.ToTable("Review");

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("rating")
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.SpecificationAggre.Options", b =>
                {
                    b.HasOne("E_Commerce.Domain.Model.SpecificationAggre.Specification", null)
                        .WithMany("options")
                        .HasForeignKey("specificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("E_Commerce.Identity.Domain.Model.UserRoleAggre.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("E_Commerce.Identity.Domain.Model.UserAggre.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("E_Commerce.Identity.Domain.Model.UserAggre.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("E_Commerce.Identity.Domain.Model.UserRoleAggre.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.Identity.Domain.Model.UserAggre.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("E_Commerce.Identity.Domain.Model.UserAggre.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.CategoryAggre.Category", b =>
                {
                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.ProductAggre.Product", b =>
                {
                    b.Navigation("images");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.SpecificationAggre.Specification", b =>
                {
                    b.Navigation("options");
                });

            modelBuilder.Entity("E_Commerce.Domain.Model.SuperCategoryAggre.SuperCategory", b =>
                {
                    b.Navigation("categories");
                });
#pragma warning restore 612, 618
        }
    }
}
